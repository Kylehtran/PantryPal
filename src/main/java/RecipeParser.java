<<<<<<< HEAD
/** 
 * This file contains RecipeParser.java
*/
=======
/**
 * Goal of RecipeParser.java:
 * 
 * This should parse the recipes generated from the GPT response and convert it
 *  into strings, into MongoDB . Ideally, this should be called when we press 
 * "save recipe" after create it and already shouldnt have duplicates
 */

>>>>>>> 6bfac7001010972ba1c865d77572572130479312
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

<<<<<<< HEAD
/**
 * This class reads text from "recipe.txt" and parses it into title, list of ingredients, and list of steps
 */
public class RecipeParser{
    private static String TITLE;
    private static String INGREDIENTS = "Ingredients \n";
    private static String STEPS = "Steps \n";
=======
public class RecipeParser {
    private String TITLE;
    private ArrayList<String> INGREDIENTS = new ArrayList<>();
    private String ingredients = "Ingredients: \n";
    private ArrayList<String> STEPS = new ArrayList<>();
    private String steps = "Steps: \n";
    private static final String RECIPE_FILE = "./recipe.txt";
>>>>>>> 6bfac7001010972ba1c865d77572572130479312

    // getter methods for private variables
    public static String getTitle() {
        return TITLE;
    }
<<<<<<< HEAD
    public static String getIngredients() {
        return INGREDIENTS;
    }
    public static String getSteps() {
=======
    public ArrayList<String> getIngredients() {
        return INGREDIENTS;
    }
    public ArrayList<String> getSteps() {
>>>>>>> 6bfac7001010972ba1c865d77572572130479312
        return STEPS;
    }
    public String getStringSteps() {
        return steps;
    }
    public String getStringIngredients() {
        return ingredients;
    }

    /**
<<<<<<< HEAD
     * Parse recipe
     */
    public static void parse() throws IOException, InterruptedException {
=======
     * Parses through ChatGPT generated messages and gets recipe title, ingredients, and steps
     * @throws IOException
     * @throws InterruptedException
     */
    public void parse() throws IOException, InterruptedException {
        System.out.println("PARSING");
>>>>>>> 6bfac7001010972ba1c865d77572572130479312
        FileReader fr
        = new FileReader(RECIPE_FILE); // reads recipes text generated by RecipeCreator
        BufferedReader br = new BufferedReader(fr);

        while (br.ready()) {
            String line = br.readLine();
            if (!line.isEmpty()){ // checks for non-empty line
                char first = line.charAt(0);
                switch(first) {
                    case 'T': // Title
                        TITLE = line.substring(7); // start of recipe title
                        break;
                    case '-': // Ingredients
<<<<<<< HEAD
                        // line = line.substring(1); // gets rid of dash
=======
                        //line = line.substring(1); // gets rid of dash
>>>>>>> 6bfac7001010972ba1c865d77572572130479312
                        first = line.charAt(0); // check for space
                        if (first == ' ') {
                            line = line.substring(1); // gets rid of space
                        }
<<<<<<< HEAD
                        INGREDIENTS += line + "\n";
                        break;
                    case '#': // Steps
                        STEPS += line + "\n";
=======
                        ingredients += line + "\n";
                        break;
                    case '#': // Steps
                        line = line.substring(3); // start of step
                        steps += line + "\n";
>>>>>>> 6bfac7001010972ba1c865d77572572130479312
                }
            }   
        }
        System.out.println("Inserting recipe...");
        RecipeManager.insertRecipe(TITLE, ingredients, steps);
        br.close();
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        RecipeParser parser = new RecipeParser();
        //System.out.println("HELLO");
        parser.parse();
    }
}
